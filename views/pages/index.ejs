<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="stylesheets/index.css">
  <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,700,900|Quicksand:300,400,500,700|Raleway:100,200,300,400,500,700,900|Roboto:100,200,300,400,500" rel="stylesheet">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title></title>
</head>

<body style="margin:0">


  <span id="jsWidth"></span>
  <span id="jsHeight"></span>

  <div class="canvas">

      <canvas  id="canvas-1" resize="true" style="background-image:linear-gradient(to bottom right, #ffcfff, #00cfff)"></canvas>
      <div id="section-top">
        <div class="nav-section">
          <nav class="topnav">
            <ul>
              <li class="navbar-left"><a class="active" id="home" href="#section-top">HOME</a></li>
              <li class="navbar-left"><a href="#section-projects">PROJECTS</a></li>
              <li class="navbar-left"><a href="#section-about">ABOUT</a></li>
              <li class="navbar-left"><a href="#section-resume">RESUME</a></li>
              <li class="navbar-right"><a href="https://www.linkedin.com/in/jesse-pelzar-09a62387/"><img src="images/icons/linkedin.png"></a></li>
              <li class="navbar-right"><a href="https://github.com/jessepelzar"><img src="images/icons/github.png"></a></li>
            </ul>
          </nav>
        </div>
      <div class="portrait">
        <!-- <img src="images/jesse_profile.jpeg" alt=""> -->
        <img src="images/jesse_profile.jpeg" alt="">
        <!-- <p style="page-break-after: always;">&nbsp;</p> -->
      </div>
      <div class="info">
        <p id="name">Jesse Pelzar</p>
        <p id="info"><a>73 Elmtree Ln, Jericho NY, 11753</a><a> | </a><a href="516-376-2309">516.376.2309</a><a> | </a><a href="mailto:subject=feedback">jessepelzar@gmail.com</a></p>
      </div>
    </div>
  </div>


  <div id="section-projects">

    <div class="wrap">

      <div class="box" id="top"></div>
      <div class="infoSec" id="topinfo"></div>

      <div id="break1"></div>

      <div class="box" id="box1">
        <div class="boxInner">
          <a onclick="showHide(1)"><img src="images/project_thumbnails/PortfolioSite-01.png" ></a></a>
          <div class="titleBox">mpp ivan project</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv1">
        The FPGA Processor Bot project involved the use of a Papilio Duo FPGA platform, the IDE Xilinx ISE, and a Rover 5 chassis. The Idea of the project was to develop a general purpose processor using the FPGA that would be able to accept user inputted instructions measured in direction and distance. The distance entered using switches indicates the distance in binary for the current instruction while the direction of the current instruction is entered using the d-pad. The general purpose processor or GPP was developed in the Xilinx environment using VHDL and the schematic editor in order to create components and processes.

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Xilinx ISE</li>
                  <li>Papilio Loader</li>

                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>VHDL</li>

                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Papilio Duo</li>
                  <li>Rover 5</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/mpp_rover/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/mpp_rover/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/mpp_rover/icon3.png" alt=""></a>
              </div>
              <div id="icon4">
                <!-- <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/mpp_rover/icon4.png" alt=""></a> -->
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>make pictures change to fsm's
                Logic of the General Purpose Processor (GPP) mimicked a simple instruction processor capable of accepting 8-bit user defined instructions which broke down to 6 bits for the distance and two bits for the direction. Building the processor fron scratch was great experience learning how lower level components work independently and how the components comunicate with eachother</p>
              </div>
              <div class="description2">
                <p>VHDL is a HDL or Hardware Description Language used on FPGA Platforms in order to recreate logical pathways using manipulateable hardware. The VHDL code for this project was used to create basic hardware components such as mux's and flip-flops to advance more advanced processor components.</p>
              </div>
              <div class="description3">
                <p>The hardware used for this project included a Papilio Duo FPGA board and a Rover 5 chassis. The Papilio included a attachable logic to enter commands while the rover included quadurature encoders for measuring distance when calculated properly within the code. </p>
              </div>
              <!-- <div class="description4">
                <p>not added yet</p>
              </div> -->
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/mpp_rover/overview.PNG"></div>
            <div class="image-box 2"><img src="images/mpp_rover/dataMEM.PNG"></div>
            <div class="image-box 3"><img src="images/mpp_rover/controlALU.PNG"></div>
            <div class="image-box 4"><img src="images/mpp_rover/registerFile.PNG"></div>
          </div>
        </div>
      </div>


            <!-- <div id="newLine1"></div> -->
      <div id="break2"></div>

      <div class="box" id="box2">
        <div class="boxInner">
          <a onclick="showHide(2)"><img src="images/project_thumbnails/PortfolioSite-02.png" alt=""></a>
          <div class="titleBox">line following robot</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv2">
        The IR Line Following Bot was a project that utilized the Atmega 328 microcontroller, a QTR-8RC reflectance sensor array, and the Rover 5 chassis. The Line following robot project objective was to reach the end of a maze which included many pathways of white lines on a black surface under three minutes.
        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Bash</li>
                  <li>Atom</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>ATMega328</li>
                  <li>Buspirate</li>
                  <li>Rover 5</li>
                  <li>QTR-8RC</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/mpp_rover/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/mpp_rover/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/mpp_rover/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/mpp_rover/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>The algorithm I designed was a simple but effective method for reaching the end of the maze. Following the right side and only doing right turns (like how UPS drivers operate) which eventually led to the end of the maze under three minutes.</p>
              </div>
              <div class="description2">
                <p>Written in C, I was able to program at a lower level, granting me full accessibility to the chip's abilities.</p>
              </div>
              <div class="description3">
                <p>Using a Buspirate programmer, I was able to flash the ATMega328 with the C code which would then be able to run my algorithm, read from the sensors and move the Rover 5 Chassis. </p>
              </div>
              <div class="description4">
                <p>For the rover to follow a line I needed a sensor capable of distinguishing between light and dark. The QTR-8RC was the choice for this project. Utilizing 4 of the eight sensors, I was able to use a series of conditions to test what sensors were over a black surface or over a white surface. this allowed the rover to correct itself if it began veering off course.</p>
              </div>
            </div>
          </div>
          <div class="images-container">
            <!-- <div class="image-box 1"><img src="images/luma/dev1.JPG"></div> -->
            <!-- <div class="image-box 2"><img src="images/luma/dev2.JPG"></div> -->
            <!-- <div class="image-box 3"><img src="images/luma/prod1.png"></div> -->
            <!-- <div class="image-box 4"><img src="images/luma/prod2.png"></div> -->
          </div>
        </div>

      </div>
            <!-- <div id="newLine2"></div> -->



      <div id="break3"></div>

      <div class="box" id="box3">
        <div class="boxInner">
          <a onclick="showHide(3)"><img src="images/project_thumbnails/PortfolioSite-03.png" alt=""></a>
          <div class="titleBox">mine sweeping robot</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv3" >

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Arduino IDE</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C</li>
                  <li>C++</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Arduino Mega</li>
                  <li>HC-SR04</li>
                  <li>IR Reciever</li>
                  <li>Rover 5</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/mpp_rover/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/mpp_rover/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/mpp_rover/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/mpp_rover/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>My initial approach was to create a few HLSM (High Level State Machine) diagrams describing the maze traveling algorithm, the obsticle/wall avoidance algorithm as well as the metal detection algorithm</p>
              </div>
              <div class="description2">
                <p>The programmed algorithms involve reading the data from the multiple HC-SR04 sensors which is then passed into functions with specific conditions in order to navagate throughout the maze course while avoiding obsticles</p>
              </div>
              <div class="description3">
                <p>The microcontroller I chose was the Arduino Mega due to the vast capabilities to accept sensor data while having the ability to output to the motors to drive the rover.</p>
              </div>
              <div class="description4">
                <p>In order to maintain a selected distance, I chose to use HC-SR04 ultrasonic proximity sensor. These sensors allowed me to create intervals of distance so the rover can be able to increase it's distance while staying parallel with the wall.</p>
              </div>
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/minesweep/logic1.png"></div>
            <div class="image-box 2"><img src="images/minesweep/logic2.png"></div>
            <div class="image-box 3"><img src="images/minesweep/logic3.png"></div>
            <div class="image-box 4"><img src="images/minesweep/logic4.png"></div>
            <div class="image-box 5"><img style="height:300px; width:auto;" src="images/minesweep/logic5.png"></div>
            <div class="image-box 6"><img src="images/minesweep/logic6.png"></div>
            <div class="image-box 7"><img src="images/minesweep/logic7.png"></div>
            <div class="image-box 1"><img src="images/minesweep/rov1.JPG"></div>
            <div class="image-box 1"><img src="images/minesweep/rov2.JPG"></div>
            <div class="image-box 1"><img src="images/minesweep/rov3.JPG"></div>
            <div class="image-box 1"><img src="images/minesweep/rov4.JPG"></div>
            </div>
          <!-- <code>
#include <Encoder.h>
#include <IR_Ping.h>
//#include <IRremote.h>
//#include <NewPing.h>

#include "fundamentals.h"


#define sonar_num 5
#define maxDistance 100




int IR_SENSOR = 21;
int RELAY_PIN = 20;
int cornersCounted = 1;

IRrecv irrecv(IR_SENSOR);
decode_results results;

//Encoder myEnc(23, 25);
//long oldPosition  = -999;
//int lineUpWithWallVal;

// Ultrasonic Sensor Pin Declartions
// Each sensor's trigger pin, echo pin, and max distance to ping.
NewPing sonar[sonar_num] {
    NewPing(9, 8, maxDistance),
    NewPing(11, 10, maxDistance),
    NewPing(5, 4, maxDistance),
    NewPing(7, 6, maxDistance),
    NewPing(3, 2, maxDistance)

};

void setup() {
delay(2000);
    Serial.begin(250000);
    pinMode(motor_A_1, OUTPUT);
    pinMode(motor_B_1, OUTPUT);
    pinMode(motor_A_2, OUTPUT);
    pinMode(motor_B_2, OUTPUT);

    pinMode(RELAY_PIN, OUTPUT);
    irrecv.enableIRIn(); // Start the receiver
    pinMode(turnTrig, OUTPUT);
    pinMode(turnTrigResponse, INPUT);


    int encoderVal;
    int encoderCounter = 0;
    unsigned long newPosition = myEnc.read();
    while(encoderCounter < 30) {

                    rotate_left();// what you want the rover to do when counting
                    newPosition = myEnc.read();
                    if (newPosition != oldPosition) {
                            oldPosition = newPosition;
                            Serial.print(" encoderCounter: ");
                            Serial.print(encoderCounter);
                            Serial.print(" newPosition: ");
                            Serial.print(newPosition);
                            Serial.println();
                            encoderCounter++;
                    }
    }

}

unsigned long inches_FR;
unsigned long inches_FL;
unsigned long inches_SB;
unsigned long inches_SF;
unsigned long inches_ST;



int token = 0;
int on = 0;
unsigned long last = millis();
int sonar_int;
const int sensor_min_vals[5] = {1, 7, 13, 19, 25};
const int sensor_mid_vals[5] = {2, 8, 14, 20, 26};
const int sensor_max_vals[5] = {3, 9, 15, 20, 27};

int cornerCounter = 0;
byte temp = 1;
int cornerAmt = 9; // first number is number of corners
int i = 0;



/*
#define turnTrig 22
void loop() {
digitalWrite(turnTrig, LOW);
drive_forwards();
delay(1000);
stop_rover();
if (irrecv.decode(&results)) {
            // If it's been at least 1/4 second since the last
            // IR received, toggle the relay
            if (millis() - last > 250) {
                    on = !on;
                    digitalWrite(RELAY_PIN, on ? HIGH : LOW);
                    digitalWrite(13, on ? HIGH : LOW);
                    //dump(&results);
            }
            last = millis();
            irrecv.resume(); // Receive the next value
    }
    irrecv.resume();

}*/



void loop() {

    //metalDetector();
     if (irrecv.decode(&results)) {
            // If it's been at least 1/4 second since the last
            // IR received, toggle the relay
            if (millis() - last > 250) {
                    on = !on;
                    digitalWrite(RELAY_PIN, on ? HIGH : LOW);
                    digitalWrite(13, on ? HIGH : LOW);
                    //dump(&results);

            }
            last = millis();
            irrecv.resume(); // Receive the next value
    }
    irrecv.resume();



    const char *sensors[5];
    sensors[0] = "SF";
    sensors[1] = "ST";
    sensors[2] = "FL";
    sensors[3] = "FR";
    sensors[4] = "SB";




    unsigned long SF = sonar[0].ping_in();
    unsigned long ST = sonar[1].ping_in();
    unsigned long FL = sonar[2].ping_in();
    unsigned long FR = sonar[3].ping_in();
    unsigned long SB = sonar[4].ping_in();

    if (SF == 0 || SF > 99) SF = 99;
    if (ST == 0 || ST > 99) ST = 99;
    if (FL == 0 || FL > 99) FL = 99;
    if (FR == 0 || FR > 99) FR = 99;
    if (SB == 0 || SB > 99) SB = 99;

    for (uint8_t k = 0; k < sonar_num; k++ ) {
            sonar_int = sonar[k].ping_in();
            if (sonar_int == 0) {sonar_int = 100;}

            Serial.print(sensors[k]);
            Serial.print("=");
            Serial.print(sonar_int);
            Serial.print("in | ");
            delayMicroseconds(50);

    }

    // every time it detects a right turn count until max number of right turns when the two obsticles are both on the walls




    Serial.print( " mid value : ");
    Serial.print(sensor_mid_vals[i]);
    int roverStateVal = mineSnof(SF, ST, FL, FR, SB, sensor_max_vals[i], sensor_min_vals[i], sensor_mid_vals[i]);

    if (roverStateVal != 0) roverStateVal = 2;

    if (roverStateVal == 2) {
      mineSnof(SF, ST, FL, FR, SB, sensor_max_vals[i], sensor_min_vals[i], sensor_mid_vals[i]);
      Serial.print("abc");
    }
    // 6 corners at most
    if (roverStateVal == 0) {
      temp = 0;
      mineSnof(SF, ST, FL, FR, SB, sensor_max_vals[i], sensor_min_vals[i], sensor_mid_vals[i]);
      //int roverStateVal = mineSnof(SF, ST, FL, FR, SB, sensor_max_vals[i], sensor_min_vals[i], sensor_max_vals[i]);
      Serial.print("def");


      Serial.print(" | cornerCounter: ");
      Serial.print(cornerCounter);
      Serial.println();
      return;
    }
    if (temp == 0) {
      cornerCounter++;
      temp = 1;
    }
    if (cornerCounter == cornerAmt) {
      i++;
      cornerCounter = 0;
    }
    if (i == 5) {
      i = 0;
    }

      Serial.print(" | cornerCounter: ");
      Serial.print(cornerCounter);
      Serial.print(" | sensor_min_vals[i]: ");
      Serial.print(sensor_mid_vals[i]);
      Serial.println();
     return;

}

          </code> -->
        </div>
        <!-- <div class="decription">
          <p style="text-align:center; margin: 0 auto;">The Mine Sweeping Robot was a autonomous robot that was given the ability to scan the entire 6x6 foot course for land mines while avoiding walls and obsticles. The obsticle avoidance was done with HC-SR04 ultrasonic proximity sensors.
          The hardware selected for this project was an arduino mega, Rover 5 Chassis, Papilio Duo, a IR Reciever, and four HC-SR04 sensors.</p>
        </div>
        <div class="images" style="margin: 0 auto; text-align:center;">
          <p style="page-break-after: always;">&nbsp;</p>
          <img style="width:50%;" src="images/minesweep/BlockDiagram_1.png" alt="">
          <p style="page-break-after: always;">&nbsp;</p>
          <img style="width:50%;" src="images/minesweep/Rover_path.png" alt="">
          <p style="page-break-after: always;">&nbsp;</p>
          <img style="width:30%;" src="images/minesweep/Rover_correct.png" alt="">
          <p style="page-break-after: always;">&nbsp;</p>
          <img style="width:20%;" src="images/minesweep/obstacle_traverse.png" alt="">
        </div> -->
      </div>

      <div id="break4"></div>
            <!-- <div id="newLine3"></div> -->
      <div class="box" id="box4">
        <div class="boxInner">
          <a onclick="showHide(4)"><img src="images/project_thumbnails/PortfolioSite-04.png" alt=""></a>
          <div class="titleBox">loomvr</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv4">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Unity 3D</li>
                  <li>Autodesk Maya</li>

                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C#</li>
                  <li>Javascript</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Oculus Rift</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/loomvr/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/loomvr/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/loomvr/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/loomvr/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>Using Autodesk Maya and Unity 3D, we were able to recontruct the small city Muros, Spain within a 3D environment where user can interact with the environment and the amenenties within.</p>
              </div>
              <div class="description2">
                <p>Programmed in C# within the Unity Environment, We were able to develop action sequences and algorithms for raycasting objects and minigame processes.</p>
              </div>
              <div class="description3">
                <p>The Loomvr application was developed in order to serve as an education tool utilizing visual interpretations, auditory exposure and speach.</p>
              </div>
              <div class="description4">
                <p>Using a VR device such as an oculus, we were able to create an emersive learning experience for users.</p>
              </div>
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/loomvr/map1.jpg"></div>
            <div class="image-box 2"><img src="images/loomvr/map2.jpg"></div>
            <div class="image-box 3"><img style="height: 300px; " src="images/loomvr/map3.png"></div>
            <div class="image-box 4"><img src="images/loomvr/map4.jpg"></div>
            <div class="image-box 5"><img src="images/loomvr/map5.png"></div>

          </div>
        </div>

      </div>

      <div id="break5"></div>
            <!-- <div id="newLine4"></div> -->
      <div class="box" id="box5">
        <div class="boxInner">
          <a onclick="showHide(5)"><img src="images/project_thumbnails/PortfolioSite-05.png" alt=""></a>
          <div class="titleBox">pulse</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv5">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Xcode</li>
                  <li>Sketch</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Swift 2</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">SDK</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Facebook SDK</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/pulse/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/pulse/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <!-- <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/pulse/icon3.png" alt=""></a> -->
              </div>
              <div class="icon4">
                <!-- <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/pulse/icon4.png" alt=""></a> -->
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>The User Interface and the User Experience were both developed within the sketch environment. The UI assets were then brought into Xcode while the UX pathways were built using segways between view controllers.</p>
              </div>
              <div class="description2">
                <p>Being initially a IOS application, we focused on the development within Xcode using the native Swift Language. We were able to implement features such as geolocation, </p>
              </div>
              <div class="description3">
                <!-- <p>In order to map the face topology in real-time, I decided to use the Intel Realsense SR300 which is able to effecivly comminicate with Faceshift with prestine accuracy.</p> -->
              </div>
              <div class="description4">
                <!-- <p>Using the Autodesk Maya environment, I was able to create a rigged head mesh consisting of 72 blendshapes which will then be provide the proper data for the program Faceshift Studio in order to mimic the realtime face topollogy.</p> -->
              </div>
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/pulse/img1.png"></div>
            <div class="image-box 2"><img src="images/pulse/img2.jpg"></div>
            <div class="image-box 3"><img src="images/pulse/img3.PNG"></div>
            <div class="image-box 4"><img src="images/pulse/img4.png"></div>
            <div class="image-box 5"><img src="images/pulse/img5.png"></div>
          </div>
        </div>

      </div>

      <div id="break6"></div>
            <!-- <div id="newLine5"></div> -->



      <div class="box" id="box6">
        <div class="boxInner">
          <a onclick="showHide(6)"><img src="images/project_thumbnails/PortfolioSite-06.png" alt=""></a>
          <div class="titleBox">luma</div>
        </div>
      </div>

      <div class="infoSec" id="selectedDiv6">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Unity 3D</li>
                  <li>Autodesk Maya</li>
                  <li>Faceshift Studio</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C#</li>
                  <li>Javascript</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Intel Realsense</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/luma/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/luma/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/luma/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/luma/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>Using the Autodesk Maya environment, I was able to create a rigged head mesh consisting of 72 blendshapes which will then be provide the proper data for the program Faceshift Studio in order to mimic the realtime face topology.</p>
              </div>
              <div class="description2">
                <p>The construction of the project took place within the Unity 3D environment. The language used was C# which was used for everything reguarding the TCP/IP communication between Faceshift and Unity to the visual effects.</p>
              </div>
              <div class="description3">
                <p>In order to map the face topology in real-time, I decided to use the Intel Realsense SR300 which is able to effecivly comminicate with Faceshift with prestine accuracy.</p>
              </div>
              <div class="description4">
                <p>Using the Autodesk Maya environment, I was able to create a rigged head mesh consisting of 72 blendshapes which will then be provide the proper data for the program Faceshift Studio in order to mimic the realtime face topollogy.</p>
              </div>
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/luma/dev1.JPG"></div>
            <div class="image-box 2"><img src="images/luma/dev2.JPG"></div>
            <div class="image-box 3"><img src="images/luma/prod1.png"></div>
            <div class="image-box 4"><img src="images/luma/prod2.png"></div>
          </div>
        </div>
      </div>

      <div id="break7"></div>



            <!-- <div id="newLine6"></div> -->
      <div class="box" id="box7">
        <div class="boxInner">
          <a onclick="showHide(7)"><img src="images/project_thumbnails/PortfolioSite-07.png" alt=""></a>
          <div class="titleBox">say it hackathon</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv7">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Unity 3D</li>
                  <li>Autodesk Maya</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C#</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p id="category">API</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Twilio</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/sayit/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/sayit/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <!-- <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/luma/icon3.png" alt=""></a> -->
              </div>
              <div class="icon4">
                <!-- <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/luma/icon4.png" alt=""></a> -->
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>Competing and winning 2nd place in the 2016 hackathon, we were required to build a functional project from scratch in only 24 hours. The game we chose to build was a game where the player would start by saying a word into a microphone. The player will then have to come up with words that start with the last character of the previous word within a limited span of time.</p>
              </div>
              <div class="description2">
                <p>Built in Unity using C#, we were able to create a simple game using the speach to text API from Twilio</p>
              </div>
              <div class="description3">
                <!-- <p>Coming soon!</p> -->
              </div>
              <div class="description4">
                <!-- <p>Coming soon!</p> -->
              </div>
            </div>
          </div>
          <div class="images-container">
            <!-- <div class="image-box 1"><img src="images/luma/dev1.JPG"></div> -->
            <!-- <div class="image-box 2"><img src="images/luma/dev2.JPG"></div> -->
            <!-- <div class="image-box 3"><img src="images/luma/prod1.png"></div> -->
            <!-- <div class="image-box 4"><img src="images/luma/prod2.png"></div> -->
          </div>
        </div>

      </div>

      <div id="break8"></div>
            <!-- <div id="newLine7"></div> -->



      <div class="box" id="box8">
        <div class="boxInner">
          <a onclick="showHide(8)"><img src="images/project_thumbnails/PortfolioSite-08.png" alt=""></a>
          <div class="titleBox">loomx</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv8">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Madrix</li>
                  <li>Arduino</li>
                  <li>openGL</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C/C++</li>
                  <li>Python</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Arduino</li>
                  <li>Raspberry Pi</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)" onclick="window.open('http://loomxlighting.com', '_blank');"><img src="images/loomx/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/loomx/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/loomx/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/loomx/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>Open loomxlighting.com in a new tab by clicking this icon</p>
              </div>
              <div class="description2">
                <p>Utilizing microcontrollers for their vast capabilities, C/C++ are the primary languages use in lighting installations. Using C/C++, we are able to create a variety of lighting animations that interact with a real time audio input stream.</p>
              </div>
              <div class="description3">
                <p>The Proposal Stage for our projects consists of visiting the job site, gathering information such as pictures and measurments and recreating the area within a 3D environment. Using Autodesk Maya, we are able to create renders of lighting concepts created by Loomx or concepts suggested by our clients. We then have our clients choose from multiple options to meet their desires.</p>
              </div>
              <div class="description4">
                <p>Utilizing different techniques, materials, and lights, we always strive to create a unique installation for each one of our clients. Construction of our products is done carefully by hand and are built to last.</p>
              </div>
            </div>
          </div>
          <div class="images-container">
            <div class="image-box 1"><img src="images/loomx/img1.png"></div>
            <div class="image-box 2"><img src="images/loomx/img2.png"></div>
            <div class="image-box 3"><img src="images/loomx/img3.jpg"></div>
            <div class="image-box 4"><img src="images/loomx/img4.jpg"></div>
            <div class="image-box 5"><img src="images/loomx/ring1.jpg"></div>
            <div class="image-box 6"><img src="images/loomx/ring2.jpg"></div>
            <div class="image-box 7"><img src="images/loomx/ring3.jpg"></div>
            <div class="image-box 8"><img src="images/loomx/ring4.jpg"></div>
            <div class="image-box 9"><img src="images/loomx/ring5.jpg"></div>
            <div class="image-box 10"><img src="images/loomx/ring6.jpg"></div>
          </div>
        </div>

      </div>

      <div id="break9"></div>
            <!-- <div id="newLine8"></div> -->



      <div class="box" id="box9">
        <div class="boxInner">
          <a onclick="showHide(9)"><img src="images/project_thumbnails/PortfolioSite-09.png" alt=""></a>
          <div class="titleBox">AVRE</div>
        </div>
      </div>
      <div class="infoSec" id="selectedDiv9">

        <div class="tools-container-main">
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Software</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Arduino IDE</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Languages</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>C</li>
                  <li>C++</li>
                </ul>
              </div>
            </div>
          </div>
          <div class="tools-container-inner">
            <div class="tools-label">
              <p class="category">Hardware</p>
            </div>
            <div class="tools-content">
              <div class="tools-line"></div>
              <div class="tools-info">
                <ul>
                  <li>Arduino Mega</li>
                  <li>IR Proximity Sensor</li>
                  <li>Linear Acuator</li>
                  <li>Mechanical & Solid-State Relay</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
        <div class="project-container">
          <div class="info-container">
            <div class="icons">
              <div class="icon1">
                <a onmouseover="show(1)" onmouseout="hide(1)"><img src="images/AVRE/icon1.png" alt=""></a>
              </div>
              <div class="icon2">
                <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/AVRE/icon2.png" alt=""></a>
              </div>
              <div class="icon3">
                <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/AVRE/icon3.png" alt=""></a>
              </div>
              <div class="icon4">
                <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/AVRE/icon4.png" alt=""></a>
              </div>
            </div>
            <div class="decription">
              <div class="description1">
                <p>The logic implemented into the algorithm acts as sequence of trigger events to control the direction of a linear actuator based on a counter that incremets every time an object passes the IR Sensor.</p>

              </div>
              <div class="description2">
                <p>The logic applied to the code allowed the ability for a IR sensor to read when a object passed through a certain region and registered each pass within a counter. The counters max value can be user defined as 6 or 12. This means that when 6 or 12 objects pass through the sensor, the linear actuator would toggle between up and down for one cycle.</p>
              </div>
              <div class="description3">
                <p>Utilizing an Arduino Mega, solid state and mechanical relays, a 10 inch linear actuator and other circuit components, I was able to create a automation sytem for opening and closing a door between two conveyer belts which allow reams of paper to roll off at the end of an assembly line in order to be boxed.</p>
              </div>
              <div class="description4">
                <p>Using an IR Proximity sensor, I was able to detect objects passing the sensor for which each object would increment a counter. Once the counter reaches it's user selected max, the linear actuator changes direction and either extends or retracts depending on it's previous state.</p>
              </div>
            </div>
          </div>
          <p style="page-break-after: always;">&nbsp;</p><br>
          <div style="width:100%;" class="image-box 9"><img style="width:100%;" src="images/AVRE/img9.png"></div>
          <p style="page-break-after: always;">&nbsp;</p>
          <div class="images-container">


            <div class="image-box 1"><img src="images/AVRE/img1.JPG"></div>
            <div class="image-box 2"><img src="images/AVRE/img2.JPG"></div>
            <div class="image-box 3"><img src="images/AVRE/img3.JPG"></div>
            <div class="image-box 4"><img src="images/AVRE/img4.JPG"></div>
            <div class="image-box 5"><img src="images/AVRE/img5.JPG"></div>
            <div class="image-box 6"><img src="images/AVRE/img6.JPG"></div>
            <div class="image-box 7"><img src="images/AVRE/img7.JPG"></div>
            <div class="image-box 8"><img src="images/AVRE/img8.1.png"></div>

          </div>
        </div>

      </div>
      <!-- <div class="box">
          <div class="boxInner">
            <div class="titleBox">JAMhoops</div>
          </div>
        </div> -->
      <!-- <div class="box">
          <div class="boxInner">
            <div class="titleBox">colonial</div>
          </div>
        </div> -->

        <div id="break10"></div>
              <!-- <div id="newLine8"></div> -->



        <div class="box" id="box10">
          <div class="boxInner">
            <a onclick="showHide(10)"><img src="images/project_thumbnails/PortfolioSite-10.png" alt=""></a>
            <div class="titleBox">PhonofixBu</div>
          </div>
        </div>
        <div class="infoSec" id="selectedDiv10">

          <div class="tools-container-main">
            <div class="tools-container-inner">
              <div class="tools-label">
                <p class="category">Environments</p>
              </div>
              <div class="tools-content">
                <div class="tools-line"></div>
                <div class="tools-info">
                  <ul>
                    <li>Node.js</li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="tools-container-inner">
              <div class="tools-label">
                <p class="category">Languages</p>
              </div>
              <div class="tools-content">
                <div class="tools-line"></div>
                <div class="tools-info">
                  <ul>
                    <li>HTML</li>
                    <li>CSS</li>
                    <li>Javascript</li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="tools-container-inner">
              <div class="tools-label">
                <p class="category">APIs</p>
              </div>
              <div class="tools-content">
                <div class="tools-line"></div>
                <div class="tools-info">
                  <ul>
                    <li>AWS SES</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
          <div class="project-container">
            <div class="info-container">
              <div class="icons">
                <div class="icon1">
                  <a onmouseover="show(1)" onmouseout="hide(1)" onclick="window.open('http://www.phonofixbu.com', '_blank');"> <img src="images/phonofix/icon1.png" alt=""></a>
                </div>
                <div class="icon2">
                  <a onmouseover="show(2)" onmouseout="hide(2)"><img src="images/phonofix/icon2.png" alt=""></a>
                </div>
                <div class="icon3">
                  <!-- <a onmouseover="show(3)" onmouseout="hide(3)"><img src="images/luma/icon3.png" alt=""></a> -->
                </div>
                <div class="icon4">
                  <!-- <a onmouseover="show(4)" onmouseout="hide(4)"><img src="images/luma/icon4.png" alt=""></a> -->
                </div>
              </div>
              <div class="decription">
                <div class="description1">
                  <p>Open phonofixbu.com in a new tab by clicking this icon</p>
                </div>
                <div class="description2">
                  <p>Built on node.js, this website is geared towards students who are in need of iPhone repairs. The phonofixbu site gave students an easy platform to submit repair requests in order to schedule an appointment</p>
                </div>
                <div class="description3">
                  <p>In order to map the face topology in real-time, I decided to use the Intel Realsense SR300 which is able to effecivly comminicate with Faceshift with prestine accuracy.</p>
                </div>
                <div class="description4">
                  <!-- <p>Using the Autodesk Maya environment, I was able to create a rigged head mesh consisting of 72 blendshapes which will then be provide the proper data for the program Faceshift Studio in order to mimic the realtime face topollogy.</p> -->
                </div>
              </div>
            </div>
            <div class="images-container">
              <div class="image-box 1"><img src="images/phonofix/img1.png"></div>
              <div class="image-box 2"><img src="images/phonofix/img2.png"></div>
              <div class="image-box 3"><img src="images/phonofix/img3.png"></div>
              <div class="image-box 4"><img src="images/phonofix/img4.png"></div>
              <div class="image-box 5"><img src="images/phonofix/img5.png"></div>
              <div class="image-box 6"><img src="images/phonofix/img6.png"></div>
            </div>
          </div>

        </div>

        <!-- <div class="box">
            <div class="boxInner">
              <div class="titleBox">aaaid</div>
            </div>
          </div> -->
    </div>
  </div>
  <div id="section-about">

  </div>
  <div id="section-resume">
    <object type="application/pdf" data="images/Jesse_Pelzar_Resume-2018.docx.pdf" width="100%" height="800px">

      </object>
  </div>
  <script type="text/paperscript" canvas="canvas-1">
// A tribute to Nyan Cat http://www.youtube.com/watch?v=QH2-TGUlwu4
// Ported from original Metaball script by SATO Hiroyuki
// http://park12.wakwak.com/~shp/lc/et/en_aics_script.html
project.currentStyle = {
	fillColor: 'rgba(255, 255, 255, 0.4)'
};
//project.opacity = 0.1;

var val = 100;
var val2 = 0;


var ballPositions = [
  [100, 100], [300, 200], [100, 300], [300, 400], [100, 500], [300, 600], [100, 700],
	[500, 100], [700, 200], [500, 300], [700, 400], [500, 500], [700, 600], [500, 700],
	[900, 100], [1100, 200], [900, 300], [1100, 400], [900, 500], [1100, 600], [900, 700],
	[1300, 100], [1500, 200], [1300, 300], [1500, 400], [1300, 500], [1500, 600], [1300, 700],
  [1700, 100], [1900, 200], [1700, 300], [1900, 400], [1700, 500], [1900, 600], [1700, 700],
	[2100, 100], [2300, 200], [2100, 300], [2300, 400], [2100, 500], [2300, 600], [2100, 700],
	[2500, 100], [2700, 200], [2500, 300], [2700, 400], [2500, 500], [2700, 600], [2500, 700],
	[2900, 100], [3100, 200], [2900, 300], [3100, 400], [2900, 500], [3100, 600], [2900, 700]
  /*
  [100, 100], [300, 200], [100, 300], [300, 400], [100, 500], [300, 600], [100, 700], [300, 800], [100, 900],
	[500, 100], [700, 200], [500, 300], [700, 400], [500, 500], [700, 600], [500, 700], [700, 800], [500, 900],
	[900, 100], [1100, 200], [900, 300], [1100, 400], [900, 500], [1100, 600], [900, 700], [1100, 800], [900, 900],
	[1300, 100], [1500, 200], [1300, 300], [1500, 400], [1300, 500], [1500, 600], [1300, 700], [1500, 800], [1300, 900],
  [1700, 100], [1900, 200], [1700, 300], [1900, 400], [1700, 500], [1900, 600], [1700, 700], [1900, 800], [1700, 900],
	[2100, 100], [2300, 200], [2100, 300], [2300, 400], [2100, 500], [2300, 600], [2100, 700], [2300, 800], [2100, 900],
	[2500, 100], [2700, 200], [2500, 300], [2700, 400], [2500, 500], [2700, 600], [2500, 700], [2700, 800], [2500, 900],
	[2900, 100], [3100, 200], [2900, 300], [3100, 400], [2900, 500], [3100, 600], [2900, 700], [3100, 800], [2900, 900]
  */

];


function jsUpdateSize(){
    // Get the dimensions of the viewport
    var width = window.innerWidth ||
                document.documentElement.clientWidth ||
                document.body.clientWidth;
    var height = window.innerHeight ||
                 document.documentElement.clientHeight ||
                 document.body.clientHeight;

    //document.getElementById('jsWidth').innerHTML = width;  // Display the width
    //document.getElementById('jsHeight').innerHTML = height;// Display the height
    console.log(width);

    // for (var i = 0; i < ballPositions.length; i++) {
    //   for (var j = 0; j < ballPositions[i].length; j++) {
    //     ballPositions[i][j] = ballPositions[i][j]/(1.85)/*1.85*/;
    //   }
    // }

};
for (var i = 0; i < ballPositions.length; i++) {
  for (var j = 0; j < ballPositions[i].length; j++) {
    ballPositions[i][j] = ballPositions[i][j]/(1.55)/*1.85*/;
  }
}
window.onload = jsUpdateSize;       // When the page first loads
window.onresize = jsUpdateSize;     // When the browser changes size

var w = window.innerWidth;



var handle_len_rate = 1;
var circlePaths = [];
var radius = 10;
var num;
for(var h = 0; h<5; h++){

}

for (var i = 0, l = ballPositions.length; i < l; i++) {
  num = Math.floor(Math.random() * (5 - 1) + 1);
  console.log(num);
	var circlePath = new Path.Circle({
		center: ballPositions[i],
    // dots radius
    radius: num
	});
	circlePaths.push(circlePath);
}

var largeCircle = new Path.Circle({
	center: [676, 433],
  // cursor radius
	radius: 1
});
circlePaths.push(largeCircle);

function onMouseMove(event) {
	largeCircle.position = event.point;
	generateConnections(circlePaths);
}

var connections = new Group();
function generateConnections(paths) {
	// Remove the last connection paths:
	connections.children = [];

	for (var i = 0, l = paths.length; i < l; i++) {
		for (var j = i - 1; j >= 0; j--) {
			var path = metaball(paths[i], paths[j], num/10, handle_len_rate, 120);
			if (path) {
				connections.appendTop(path);
				path.removeOnMove();
			}
		}
	}
}

generateConnections(circlePaths);

// ---------------------------------------------
function metaball(ball1, ball2, v, handle_len_rate, maxDistance) {
	var center1 = ball1.position;
	var center2 = ball2.position;
	var radius1 = ball1.bounds.width / 2;
	var radius2 = ball2.bounds.width / 2;
	var pi2 = Math.PI / 2;
	var d = center1.getDistance(center2);
	var u1, u2;

	if (radius1 == 0 || radius2 == 0)
		return;

	if (d > maxDistance || d <= Math.abs(radius1 - radius2)) {
		return;
	} else if (d < radius1 + radius2) { // case circles are overlapping
		u1 = Math.acos((radius1 * radius1 + d * d - radius2 * radius2) /
				(2 * radius1 * d));
		u2 = Math.acos((radius2 * radius2 + d * d - radius1 * radius1) /
				(2 * radius2 * d));
	} else {
		u1 = 0;
		u2 = 0;
	}

	var angle1 = (center2 - center1).getAngleInRadians();
	var angle2 = Math.acos((radius1 - radius2) / d);
	var angle1a = angle1 + u1 + (angle2 - u1) * v;
	var angle1b = angle1 - u1 - (angle2 - u1) * v;
	var angle2a = angle1 + Math.PI - u2 - (Math.PI - u2 - angle2) * v;
	var angle2b = angle1 - Math.PI + u2 + (Math.PI - u2 - angle2) * v;
	var p1a = center1 + getVector(angle1a, radius1);
	var p1b = center1 + getVector(angle1b, radius1);
	var p2a = center2 + getVector(angle2a, radius2);
	var p2b = center2 + getVector(angle2b, radius2);

	// define handle length by the distance between
	// both ends of the curve to draw
	var totalRadius = (radius1 + radius2);
	var d2 = Math.min(v * handle_len_rate, (p1a - p2a).length / totalRadius);

	// case circles are overlapping:
	d2 *= Math.min(1, d * 2 / (radius1 + radius2));

	radius1 *= d2;
	radius2 *= d2;

	var path = new Path({
		segments: [p1a, p2a, p2b, p1b],
		style: ball1.style,
		closed: true
	});
	var segments = path.segments;
	segments[0].handleOut = getVector(angle1a - pi2, radius1);
	segments[1].handleIn = getVector(angle2a + pi2, radius2);
	segments[2].handleOut = getVector(angle2b - pi2, radius2);
	segments[3].handleIn = getVector(angle1b + pi2, radius1);
	return path;
}

// ------------------------------------------------
function getVector(radians, length) {
	return new Point({
		// Convert radians to degrees:
		angle: radians * 180 / Math.PI,
		length: length
	});
}
</script>
<script type="text/javascript" src="scripts/codemirror.js"></script>
<script type="text/javascript" src="scripts/index.js"></script>
<script type="text/javascript" src="scripts/paper.js"></script>
<script type="text/javascript" src="scripts/jquery.js"></script>
</body>

</html>
